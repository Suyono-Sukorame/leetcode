class Solution {

function minMalwareSpread($graph, $initial) {
    $visitedGlobal = [];
    $componentsDict = [];
    $this->dfs($graph, $initial, $visitedGlobal, $componentsDict);

    $x = [];
    foreach ($componentsDict as $i => $comp) {
        $s = [];
        foreach ($componentsDict as $j => $comp2) {
            if ($i != $j) {
                foreach ($comp2 as $each) {
                    $s[$each] = true;
                }
            }
        }
        $x[$i] = $s;
    }

    $d = [];
    foreach ($x as $i => $comp) {
        $d[$i] = count($comp);
    }

    $minDV = min($d);

    $ans = [];
    foreach ($d as $i => $value) {
        if ($value == $minDV) {
            $ans[] = $i;
        }
    }

    sort($ans);
    return $ans[0];
}

function dfs($graph, $initial, &$visitedGlobal, &$componentsDict) {
    foreach ($initial as $i) {
        if (in_array($i, $visitedGlobal)) {
            foreach ($componentsDict as $x => $comp) {
                if (in_array($i, $comp)) {
                    $componentsDict[$i] = $comp;
                    break;
                }
            }
        } else {
            $s = [];
            $this->dfsHelper($graph, $i, $visitedGlobal, $s);
            $componentsDict[$i] = $s;
            foreach ($s as $node) {
                $visitedGlobal[] = $node;
            }
        }
    }
}

function dfsHelper($graph, $node, &$visitedGlobal, &$s) {
    $visitedGlobal[] = $node;
    $s[] = $node;

    foreach ($graph[$node] as $i => $neighbor) {
        if ($i != $node && $neighbor == 1 && !in_array($i, $s)) {
            $this->dfsHelper($graph, $i, $visitedGlobal, $s);
        }
    }
}
}
